{"ast":null,"code":"var _jsxFileName = \"/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/context/ChatContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [id, setId] = useState();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const socketRef = useRef();\n  const messageData = {\n    body: message,\n    id,\n    name: 'Cameron Williamson',\n    isLastMessage: true\n  };\n  useEffect(() => {\n    socketRef.current = io.connect(`http://${window.location.hostname}:3030`);\n    socketRef.current.on('id', userId => {\n      setId(userId);\n    });\n    socketRef.current.on(\"message from server\", message => {\n      receivedMessage(message);\n    });\n    socketRef.current.on('message', message => {\n      receivedMessage(message);\n    });\n  }, []);\n\n  const validateMessage = () => {\n    const regex = new RegExp(/[!@#$%^&*()?\":{}|<>]/g);\n    const isUnallowedChars = regex.test(message);\n    return isUnallowedChars ? true : false;\n  };\n\n  const sendMessage = e => {\n    e.preventDefault();\n    const isNotToSend = validateMessage();\n\n    if (isNotToSend) {\n      console.log('unvalid');\n      return;\n    }\n\n    setMessage('');\n    socketRef.current.emit('send message', messageData);\n  };\n\n  const sendByButton = () => {\n    validateMessage(message);\n    if (!message) return;\n    setMessage('');\n    socketRef.current.emit('send message', messageData);\n    socketRef.current.emit('debounce', null);\n  };\n\n  const setMacroAsMessage = macro => {\n    setMessage(macro);\n  };\n\n  const handleChange = e => {\n    setMessage(e.target.value);\n  };\n\n  const receivedMessage = message => {\n    setMessages(oldMsgs => [...oldMsgs, message]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      receivedMessage,\n      handleChange,\n      sendMessage,\n      messages,\n      message,\n      id,\n      sendByButton,\n      setMacroAsMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatProvider, \"V0UOlsUmV+gl84pwZr53PAbO+v0=\");\n\n_c = ChatProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/context/ChatContext.js"],"names":["createContext","useState","useEffect","useRef","io","ChatContext","ChatProvider","children","id","setId","messages","setMessages","message","setMessage","socketRef","messageData","body","name","isLastMessage","current","connect","window","location","hostname","on","userId","receivedMessage","validateMessage","regex","RegExp","isUnallowedChars","test","sendMessage","e","preventDefault","isNotToSend","console","log","emit","sendByButton","setMacroAsMessage","macro","handleChange","target","value","oldMsgs"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect, useRef } from 'react'\nimport io from 'socket.io-client';\nexport const ChatContext = createContext()\n\nexport const ChatProvider = ({ children }) => {\n    const [id, setId] = useState();\n    const [messages, setMessages] = useState([]);\n    const [message, setMessage] = useState('');\n    const socketRef = useRef();\n    const messageData = {\n        body: message,\n        id,\n        name: 'Cameron Williamson',\n        isLastMessage: true\n    };\n\n    useEffect(() => {\n        socketRef.current = io.connect(`http://${window.location.hostname}:3030`);\n        socketRef.current.on('id', (userId) => {\n            setId(userId);\n        });\n        socketRef.current.on(\"message from server\", message => {\n            receivedMessage(message);\n        })\n        socketRef.current.on('message', (message) => {\n            receivedMessage(message);\n        });\n    }, []);\n\n    const validateMessage = () => {\n        const regex = new RegExp(/[!@#$%^&*()?\":{}|<>]/g);\n        const isUnallowedChars = regex.test(message)\n        return isUnallowedChars ? true : false;\n    }\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        const isNotToSend = validateMessage()\n        if (isNotToSend) {\n            console.log('unvalid')\n            return\n        }\n        setMessage('');\n        socketRef.current.emit('send message', messageData);\n    }\n    \n    const sendByButton = () => {\n        validateMessage(message)\n        if (!message) return\n        setMessage('')\n        socketRef.current.emit('send message', messageData);\n        socketRef.current.emit('debounce', null);\n    }\n\n    const setMacroAsMessage = (macro) => {\n        setMessage(macro)\n    }\n\n    const handleChange = (e) => {\n        setMessage(e.target.value);\n    }\n\n    const receivedMessage = (message) => {\n        setMessages((oldMsgs) => [...oldMsgs, message]);\n    }\n\n    return (\n        <ChatContext.Provider\n            value={{\n                receivedMessage, handleChange, sendMessage, messages, message, id, sendByButton, setMacroAsMessage\n            }}>\n            {children}\n        </ChatContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}