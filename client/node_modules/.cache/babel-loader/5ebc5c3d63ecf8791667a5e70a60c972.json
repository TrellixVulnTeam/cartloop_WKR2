{"ast":null,"code":"var _jsxFileName = \"/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/context/ChatContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [id, setId] = useState();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const socketRef = useRef();\n  const messageData = {\n    body: message,\n    id,\n    name: 'Cameron Williamson',\n    isLastMessage: true\n  };\n  useEffect(() => {\n    socketRef.current = io.connect(`http://${window.location.hostname}:3030`);\n    socketRef.current.on('id', userId => {\n      setId(userId);\n    });\n    socketRef.current.on(\"message from server\", message => {\n      receivedMessage(message);\n    });\n    socketRef.current.on('message', message => {\n      receivedMessage(message);\n    });\n  }, []);\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    messages.length > 10 ? setMessages([...lastMessage]) : null;\n  }, [messages]);\n\n  const validateMessage = () => {\n    const regex = new RegExp(/[!@#$%^&*()?\"{}|<>]/g);\n    const isUnallowedChars = regex.test(message);\n\n    if (isUnallowedChars) {\n      console.log('unvalid'); // create function for user notification on unvalid chars\n    } else {\n      setMessage('');\n      socketRef.current.emit('send message', messageData);\n      socketRef.current.emit('debounce', null);\n    }\n  };\n\n  const sendMessage = e => {\n    e.preventDefault();\n    validateMessage();\n  };\n\n  const sendByButton = () => {\n    if (!message) return;\n    validateMessage(message);\n  };\n\n  const setMacroAsMessage = macro => {\n    setMessage(macro);\n  };\n\n  const handleChange = e => {\n    setMessage(e.target.value);\n  };\n\n  const receivedMessage = message => {\n    setMessages(oldMsgs => [...oldMsgs, message]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      receivedMessage,\n      handleChange,\n      sendMessage,\n      messages,\n      message,\n      id,\n      sendByButton,\n      setMacroAsMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatProvider, \"4u9L99GTNRK/2R5vTTYprnhov4Q=\");\n\n_c = ChatProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/context/ChatContext.js"],"names":["createContext","useState","useEffect","useRef","io","ChatContext","ChatProvider","children","id","setId","messages","setMessages","message","setMessage","socketRef","messageData","body","name","isLastMessage","current","connect","window","location","hostname","on","userId","receivedMessage","lastMessage","length","validateMessage","regex","RegExp","isUnallowedChars","test","console","log","emit","sendMessage","e","preventDefault","sendByButton","setMacroAsMessage","macro","handleChange","target","value","oldMsgs"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect, useRef } from 'react'\nimport io from 'socket.io-client';\nexport const ChatContext = createContext()\n\nexport const ChatProvider = ({ children }) => {\n    const [id, setId] = useState();\n    const [messages, setMessages] = useState([]);\n    const [message, setMessage] = useState('');\n    const socketRef = useRef();\n    const messageData = {\n        body: message,\n        id,\n        name: 'Cameron Williamson',\n        isLastMessage: true\n    };\n\n    useEffect(() => {\n        socketRef.current = io.connect(`http://${window.location.hostname}:3030`);\n        socketRef.current.on('id', (userId) => {\n            setId(userId);\n        });\n        socketRef.current.on(\"message from server\", message => {\n            receivedMessage(message);\n        })\n        socketRef.current.on('message', (message) => {\n            receivedMessage(message);\n        });\n    }, []);\n\n    useEffect(()=> {\n        const lastMessage = messages[messages.length-1]\n        messages.length > 10 ? setMessages([...lastMessage]) : null\n    }, [messages])\n\n    const validateMessage = () => {\n        const regex = new RegExp(/[!@#$%^&*()?\"{}|<>]/g);\n        const isUnallowedChars = regex.test(message)\n        if (isUnallowedChars) {\n            console.log('unvalid');\n            // create function for user notification on unvalid chars\n        } else {\n            setMessage('');\n            socketRef.current.emit('send message', messageData);\n            socketRef.current.emit('debounce', null);\n        }\n    }\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        validateMessage()\n    }\n\n    const sendByButton = () => {\n        if (!message) return\n        validateMessage(message)\n    }\n\n    const setMacroAsMessage = (macro) => {\n        setMessage(macro)\n    }\n\n    const handleChange = (e) => {\n        setMessage(e.target.value);\n    }\n\n    const receivedMessage = (message) => {\n        setMessages((oldMsgs) => [...oldMsgs, message]);\n    }\n\n    return (\n        <ChatContext.Provider\n            value={{\n                receivedMessage, handleChange, sendMessage, messages, message, id, sendByButton, setMacroAsMessage\n            }}>\n            {children}\n        </ChatContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}