{"ast":null,"code":"var _jsxFileName = \"/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/context/ChatContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [id, setId] = useState();\n  const [messages, setMessages] = useState([]);\n  const [isInvalidMessage, setIsInvalidMessage] = useEffect(false);\n  const [message, setMessage] = useState('');\n  const socketRef = useRef();\n  const messageData = {\n    body: message,\n    id,\n    name: 'Cameron Williamson'\n  };\n  useEffect(() => {\n    socketRef.current = io.connect(`http://${window.location.hostname}:3030`);\n    socketRef.current.on('id', userId => {\n      setId(userId);\n    });\n    socketRef.current.on(\"message from server\", message => {\n      receivedMessage(message);\n    });\n    socketRef.current.on('message', message => {\n      receivedMessage(message);\n    });\n  }, []);\n  useEffect(() => {\n    messages.length > 10 ? setMessages([]) : null;\n  }, [messages]);\n\n  const validateMessage = () => {\n    const regex = new RegExp(/[!@#$%^&*()\"{}|<>]/g);\n    const isUnallowedChars = regex.test(message);\n\n    if (isUnallowedChars) {\n      setIsInvalidMessage(true);\n      setTimeout(() => {\n        setIsInvalidMessage(false);\n      }, 3000);\n    } else {\n      setMessage('');\n      socketRef.current.emit('send message', messageData);\n      socketRef.current.emit('debounce', null);\n    }\n  };\n\n  const sendMessage = e => {\n    e.preventDefault();\n    validateMessage();\n  };\n\n  const sendByButton = () => {\n    if (!message) return;\n    validateMessage(message);\n  };\n\n  const setMacroAsMessage = macro => {\n    setMessage(macro);\n  };\n\n  const handleChange = e => {\n    setMessage(e.target.value);\n  };\n\n  const receivedMessage = message => {\n    setMessages(oldMsgs => [...oldMsgs, message]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      receivedMessage,\n      handleChange,\n      sendMessage,\n      messages,\n      message,\n      id,\n      sendByButton,\n      setMacroAsMessage,\n      isInvalidMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatProvider, \"1Kqk0LHTmxBaavCP9nlvIPEgIow=\");\n\n_c = ChatProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/context/ChatContext.js"],"names":["createContext","useState","useEffect","useRef","io","ChatContext","ChatProvider","children","id","setId","messages","setMessages","isInvalidMessage","setIsInvalidMessage","message","setMessage","socketRef","messageData","body","name","current","connect","window","location","hostname","on","userId","receivedMessage","length","validateMessage","regex","RegExp","isUnallowedChars","test","setTimeout","emit","sendMessage","e","preventDefault","sendByButton","setMacroAsMessage","macro","handleChange","target","value","oldMsgs"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,MAA7C,QAA2D,OAA3D;AACA,OAAOC,EAAP,MAAe,kBAAf;;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,EAAjC;AAEP,OAAO,MAAMM,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC1C,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcR,QAAQ,EAA5B;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,gBAAD,EAAmBC,mBAAnB,IAA0CX,SAAS,CAAC,KAAD,CAAzD;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMe,SAAS,GAAGb,MAAM,EAAxB;AACA,QAAMc,WAAW,GAAG;AAChBC,IAAAA,IAAI,EAAEJ,OADU;AAEhBN,IAAAA,EAFgB;AAGhBW,IAAAA,IAAI,EAAE;AAHU,GAApB;AAMAjB,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,SAAS,CAACI,OAAV,GAAoBhB,EAAE,CAACiB,OAAH,CAAY,UAASC,MAAM,CAACC,QAAP,CAAgBC,QAAS,OAA9C,CAApB;AACAR,IAAAA,SAAS,CAACI,OAAV,CAAkBK,EAAlB,CAAqB,IAArB,EAA4BC,MAAD,IAAY;AACnCjB,MAAAA,KAAK,CAACiB,MAAD,CAAL;AACH,KAFD;AAGAV,IAAAA,SAAS,CAACI,OAAV,CAAkBK,EAAlB,CAAqB,qBAArB,EAA4CX,OAAO,IAAI;AACnDa,MAAAA,eAAe,CAACb,OAAD,CAAf;AACH,KAFD;AAGAE,IAAAA,SAAS,CAACI,OAAV,CAAkBK,EAAlB,CAAqB,SAArB,EAAiCX,OAAD,IAAa;AACzCa,MAAAA,eAAe,CAACb,OAAD,CAAf;AACH,KAFD;AAGH,GAXQ,EAWN,EAXM,CAAT;AAaAZ,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,QAAQ,CAACkB,MAAT,GAAkB,EAAlB,GAAuBjB,WAAW,CAAC,EAAD,CAAlC,GAAyC,IAAzC;AACH,GAFQ,EAEN,CAACD,QAAD,CAFM,CAAT;;AAIA,QAAMmB,eAAe,GAAG,MAAM;AAC1B,UAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAW,qBAAX,CAAd;AACA,UAAMC,gBAAgB,GAAGF,KAAK,CAACG,IAAN,CAAWnB,OAAX,CAAzB;;AACA,QAAIkB,gBAAJ,EAAsB;AAClBnB,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAqB,MAAAA,UAAU,CAAC,MAAM;AACdrB,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACF,OAFS,EAEP,IAFO,CAAV;AAGH,KALD,MAKO;AACHE,MAAAA,UAAU,CAAC,EAAD,CAAV;AACAC,MAAAA,SAAS,CAACI,OAAV,CAAkBe,IAAlB,CAAuB,cAAvB,EAAuClB,WAAvC;AACAD,MAAAA,SAAS,CAACI,OAAV,CAAkBe,IAAlB,CAAuB,UAAvB,EAAmC,IAAnC;AACH;AACJ,GAbD;;AAeA,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACC,cAAF;AACAT,IAAAA,eAAe;AAClB,GAHD;;AAKA,QAAMU,YAAY,GAAG,MAAM;AACvB,QAAI,CAACzB,OAAL,EAAc;AACde,IAAAA,eAAe,CAACf,OAAD,CAAf;AACH,GAHD;;AAKA,QAAM0B,iBAAiB,GAAIC,KAAD,IAAW;AACjC1B,IAAAA,UAAU,CAAC0B,KAAD,CAAV;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAIL,CAAD,IAAO;AACxBtB,IAAAA,UAAU,CAACsB,CAAC,CAACM,MAAF,CAASC,KAAV,CAAV;AACH,GAFD;;AAIA,QAAMjB,eAAe,GAAIb,OAAD,IAAa;AACjCH,IAAAA,WAAW,CAAEkC,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAa/B,OAAb,CAAd,CAAX;AACH,GAFD;;AAIA,sBACI,QAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AACHa,MAAAA,eADG;AACce,MAAAA,YADd;AAC4BN,MAAAA,WAD5B;AACyC1B,MAAAA,QADzC;AACmDI,MAAAA,OADnD;AAC4DN,MAAAA,EAD5D;AACgE+B,MAAAA,YADhE;AAC8EC,MAAAA,iBAD9E;AACiG5B,MAAAA;AADjG,KADX;AAAA,cAIKL;AAJL;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA1EM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, useState, useEffect, useRef } from 'react'\nimport io from 'socket.io-client';\nexport const ChatContext = createContext()\n\nexport const ChatProvider = ({ children }) => {\n    const [id, setId] = useState();\n    const [messages, setMessages] = useState([]);\n    const [isInvalidMessage, setIsInvalidMessage] = useEffect(false)\n    const [message, setMessage] = useState('');\n    const socketRef = useRef();\n    const messageData = {\n        body: message,\n        id,\n        name: 'Cameron Williamson',\n    };\n\n    useEffect(() => {\n        socketRef.current = io.connect(`http://${window.location.hostname}:3030`);\n        socketRef.current.on('id', (userId) => {\n            setId(userId);\n        });\n        socketRef.current.on(\"message from server\", message => {\n            receivedMessage(message);\n        })\n        socketRef.current.on('message', (message) => {\n            receivedMessage(message);\n        });\n    }, []);\n\n    useEffect(() => {\n        messages.length > 10 ? setMessages([]) : null\n    }, [messages])\n\n    const validateMessage = () => {\n        const regex = new RegExp(/[!@#$%^&*()\"{}|<>]/g);\n        const isUnallowedChars = regex.test(message)\n        if (isUnallowedChars) {\n            setIsInvalidMessage(true)\n            setTimeout(() => {\n               setIsInvalidMessage(false) \n            }, 3000);\n        } else {\n            setMessage('');\n            socketRef.current.emit('send message', messageData);\n            socketRef.current.emit('debounce', null);\n        }\n    }\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        validateMessage()\n    }\n\n    const sendByButton = () => {\n        if (!message) return\n        validateMessage(message)\n    }\n\n    const setMacroAsMessage = (macro) => {\n        setMessage(macro)\n    }\n\n    const handleChange = (e) => {\n        setMessage(e.target.value);\n    }\n\n    const receivedMessage = (message) => {\n        setMessages((oldMsgs) => [...oldMsgs, message]);\n    }\n\n    return (\n        <ChatContext.Provider\n            value={{\n                receivedMessage, handleChange, sendMessage, messages, message, id, sendByButton, setMacroAsMessage, isInvalidMessage\n            }}>\n            {children}\n        </ChatContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}