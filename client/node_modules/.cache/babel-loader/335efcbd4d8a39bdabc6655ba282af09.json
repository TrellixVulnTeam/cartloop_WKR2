{"ast":null,"code":"var _jsxFileName = \"/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/cmps/Messages.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Messages = () => {\n  _s();\n\n  const [yourID, setYourID] = useState();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = io.connect('/');\n    socketRef.current.on(\"your id\", id => {\n      setYourID(id);\n    });\n    socketRef.current.on(\"message\", message => {\n      console.log(\"here\");\n      receivedMessage(message);\n    });\n  }, []);\n\n  function receivedMessage(message) {\n    setMessages(oldMsgs => [...oldMsgs, message]);\n  }\n\n  function sendMessage(e) {\n    e.preventDefault();\n    const messageObject = {\n      body: message,\n      id: yourID\n    };\n    setMessage(\"\");\n    socketRef.current.emit(\"send message\", messageObject);\n  }\n\n  function handleChange(e) {\n    setMessage(e.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: messages.map((message, index) => {\n        if (message.id === yourID) {\n          return /*#__PURE__*/_jsxDEV(MyRow, {\n            children: /*#__PURE__*/_jsxDEV(MyMessage, {\n              children: message.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(PartnerRow, {\n          children: /*#__PURE__*/_jsxDEV(PartnerMessage, {\n            children: message.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(TextArea, {\n        value: message,\n        onChange: handleChange,\n        placeholder: \"Say something...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Messages, \"5+sOTU/vxNZim5edRr229T8Sznw=\");\n\n_c = Messages;\nexport default Messages; // import React, { useEffect, useState } from 'react';\n// function Messages({ socket }) {\n//   const [messages, setMessages] = useState({});\n//   console.log(messages);\n//   useEffect(() => {\n//     const messageListener = (message) => {\n//       setMessages((prevMessages) => {\n//         const newMessages = {...prevMessages};\n//         newMessages[message.id] = message;\n//         return newMessages;\n//       });\n//     };\n//     const deleteMessageListener = (messageID) => {\n//       console.log(messageID);\n//       setMessages((prevMessages) => {\n//         console.log(prevMessages);\n//         const newMessages = {...prevMessages};\n//         delete newMessages[messageID];\n//         return newMessages;\n//       });\n//     };\n//     socket.on('message', messageListener);\n//     socket.on('deleteMessage', deleteMessageListener);\n//     socket.emit('getMessages');\n//     return () => {\n//       socket.off('message', messageListener);\n//       socket.off('deleteMessage', deleteMessageListener);\n//     };\n//   }, [socket]);\n//   return (\n//     <div className=\"message-list\">\n//       <h1>lala</h1>\n//       {[...Object.values(messages)]\n//         .sort((a, b) => a.time - b.time)\n//         .map((message) => (\n//           <div\n//             key={message.id}\n//             className=\"message-container\"\n//             title={`Sent at ${new Date(message.time).toLocaleTimeString()}`}\n//           >\n//             <span className=\"message\">{message.value}</span>\n//           </div>\n//         ))\n//       }\n//     </div>\n//   );\n// }\n// export default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/cmps/Messages.jsx"],"names":["React","useState","useEffect","useRef","io","Messages","yourID","setYourID","messages","setMessages","message","setMessage","socketRef","current","connect","on","id","console","log","receivedMessage","oldMsgs","sendMessage","e","preventDefault","messageObject","body","emit","handleChange","target","value","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport io from \"socket.io-client\";\n\nconst Messages = () => {\n  const [yourID, setYourID] = useState();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = io.connect('/');\n\n    socketRef.current.on(\"your id\", id => {\n      setYourID(id);\n    })\n\n    socketRef.current.on(\"message\", (message) => {\n      console.log(\"here\");\n      receivedMessage(message);\n    })\n  }, []);\n\n  function receivedMessage(message) {\n    setMessages(oldMsgs => [...oldMsgs, message]);\n  }\n\n  function sendMessage(e) {\n    e.preventDefault();\n    const messageObject = {\n      body: message,\n      id: yourID,\n    };\n    setMessage(\"\");\n    socketRef.current.emit(\"send message\", messageObject);\n  }\n\n  function handleChange(e) {\n    setMessage(e.target.value);\n  }\n\n  return (\n    <Page>\n      <Container>\n        {messages.map((message, index) => {\n          if (message.id === yourID) {\n            return (\n              <MyRow key={index}>\n                <MyMessage>\n                  {message.body}\n                </MyMessage>\n              </MyRow>\n            )\n          }\n          return (\n            <PartnerRow key={index}>\n              <PartnerMessage>\n                {message.body}\n              </PartnerMessage>\n            </PartnerRow>\n          )\n        })}\n      </Container>\n      <Form onSubmit={sendMessage}>\n        <TextArea value={message} onChange={handleChange} placeholder=\"Say something...\" />\n        <Button>Send</Button>\n      </Form>\n    </Page>\n  );\n};\n\nexport default Messages;\n// import React, { useEffect, useState } from 'react';\n\n// function Messages({ socket }) {\n//   const [messages, setMessages] = useState({});\n//   console.log(messages);\n//   useEffect(() => {\n//     const messageListener = (message) => {\n//       setMessages((prevMessages) => {\n//         const newMessages = {...prevMessages};\n//         newMessages[message.id] = message;\n//         return newMessages;\n//       });\n//     };\n  \n//     const deleteMessageListener = (messageID) => {\n//       console.log(messageID);\n//       setMessages((prevMessages) => {\n//         console.log(prevMessages);\n//         const newMessages = {...prevMessages};\n//         delete newMessages[messageID];\n//         return newMessages;\n//       });\n//     };\n  \n//     socket.on('message', messageListener);\n//     socket.on('deleteMessage', deleteMessageListener);\n//     socket.emit('getMessages');\n\n//     return () => {\n//       socket.off('message', messageListener);\n//       socket.off('deleteMessage', deleteMessageListener);\n//     };\n//   }, [socket]);\n\n//   return (\n//     <div className=\"message-list\">\n//       <h1>lala</h1>\n//       {[...Object.values(messages)]\n//         .sort((a, b) => a.time - b.time)\n//         .map((message) => (\n//           <div\n//             key={message.id}\n//             className=\"message-container\"\n//             title={`Sent at ${new Date(message.time).toLocaleTimeString()}`}\n//           >\n//             <span className=\"message\">{message.value}</span>\n//           </div>\n//         ))\n//       }\n//     </div>\n//   );\n// }\n\n// export default Messages;"]},"metadata":{},"sourceType":"module"}