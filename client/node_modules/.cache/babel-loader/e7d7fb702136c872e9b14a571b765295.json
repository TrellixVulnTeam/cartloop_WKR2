{"ast":null,"code":"var _jsxFileName = \"/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/context/ChatContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [id, setId] = useState();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const socketRef = useRef();\n  const messageData = {\n    body: message,\n    id\n  };\n\n  const sendMessage = e => {\n    e.preventDefault();\n    setMessage('');\n    socketRef.current.emit('send message', messageData);\n  };\n\n  const sendByButton = () => {\n    setMessage('');\n    socketRef.current.emit('send message', messageData);\n  };\n\n  const handleChange = e => {\n    setMessage(e.target.value);\n  };\n\n  useEffect(() => {\n    // setId('user')\n    socketRef.current = io.connect(`http://${window.location.hostname}:3030`);\n    socketRef.current.on('id', userId => {\n      setId(userId);\n    });\n    socketRef.current.on('message', message => {\n      receivedMessage(message);\n    });\n  }, []);\n\n  const receivedMessage = message => {\n    setMessages(oldMsgs => [...oldMsgs, message]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      receivedMessage,\n      handleChange,\n      sendMessage,\n      messages,\n      message,\n      id,\n      sendByButton\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatProvider, \"V0UOlsUmV+gl84pwZr53PAbO+v0=\");\n\n_c = ChatProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/context/ChatContext.js"],"names":["createContext","useState","useEffect","useRef","io","ChatContext","ChatProvider","children","id","setId","messages","setMessages","message","setMessage","socketRef","messageData","body","sendMessage","e","preventDefault","current","emit","sendByButton","handleChange","target","value","connect","window","location","hostname","on","userId","receivedMessage","oldMsgs"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,MAA7C,QAA2D,OAA3D;AACA,OAAOC,EAAP,MAAe,kBAAf;;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,EAAjC;AAEP,OAAO,MAAMM,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC1C,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcR,QAAQ,EAA5B;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMa,SAAS,GAAGX,MAAM,EAAxB;AAEA,QAAMY,WAAW,GAAG;AAChBC,IAAAA,IAAI,EAAEJ,OADU;AAEhBJ,IAAAA;AAFgB,GAApB;;AAKA,QAAMS,WAAW,GAAIC,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACC,cAAF;AACAN,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAC,IAAAA,SAAS,CAACM,OAAV,CAAkBC,IAAlB,CAAuB,cAAvB,EAAuCN,WAAvC;AACH,GAJD;;AAMA,QAAMO,YAAY,GAAG,MAAM;AACvBT,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAC,IAAAA,SAAS,CAACM,OAAV,CAAkBC,IAAlB,CAAuB,cAAvB,EAAuCN,WAAvC;AACH,GAHD;;AAKA,QAAMQ,YAAY,GAAIL,CAAD,IAAO;AACxBL,IAAAA,UAAU,CAACK,CAAC,CAACM,MAAF,CAASC,KAAV,CAAV;AACH,GAFD;;AAIAvB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAY,IAAAA,SAAS,CAACM,OAAV,GAAoBhB,EAAE,CAACsB,OAAH,CAAY,UAASC,MAAM,CAACC,QAAP,CAAgBC,QAAS,OAA9C,CAApB;AACAf,IAAAA,SAAS,CAACM,OAAV,CAAkBU,EAAlB,CAAqB,IAArB,EAA4BC,MAAD,IAAY;AACnCtB,MAAAA,KAAK,CAACsB,MAAD,CAAL;AACH,KAFD;AAIAjB,IAAAA,SAAS,CAACM,OAAV,CAAkBU,EAAlB,CAAqB,SAArB,EAAiClB,OAAD,IAAa;AACzCoB,MAAAA,eAAe,CAACpB,OAAD,CAAf;AACH,KAFD;AAGH,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMoB,eAAe,GAAIpB,OAAD,IAAa;AACjCD,IAAAA,WAAW,CAAEsB,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAarB,OAAb,CAAd,CAAX;AACH,GAFD;;AAIA,sBACI,QAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AACHoB,MAAAA,eADG;AACcT,MAAAA,YADd;AAC4BN,MAAAA,WAD5B;AACyCP,MAAAA,QADzC;AACmDE,MAAAA,OADnD;AAC4DJ,MAAAA,EAD5D;AACgEc,MAAAA;AADhE,KADX;AAAA,cAIKf;AAJL;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAlDM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, useState, useEffect, useRef } from 'react'\nimport io from 'socket.io-client';\nexport const ChatContext = createContext()\n\nexport const ChatProvider = ({ children }) => {\n    const [id, setId] = useState();\n    const [messages, setMessages] = useState([]);\n    const [message, setMessage] = useState('');\n    const socketRef = useRef();\n\n    const messageData = {\n        body: message,\n        id\n    };\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        setMessage('');\n        socketRef.current.emit('send message', messageData);\n    }\n\n    const sendByButton = () => {\n        setMessage('')\n        socketRef.current.emit('send message', messageData);\n    }\n\n    const handleChange = (e) => {\n        setMessage(e.target.value);\n    }\n\n    useEffect(() => {\n        // setId('user')\n        socketRef.current = io.connect(`http://${window.location.hostname}:3030`);\n        socketRef.current.on('id', (userId) => {\n            setId(userId);\n        });\n\n        socketRef.current.on('message', (message) => {\n            receivedMessage(message);\n        });\n    }, []);\n\n    const receivedMessage = (message) => {\n        setMessages((oldMsgs) => [...oldMsgs, message]);\n    }\n\n    return (\n        <ChatContext.Provider\n            value={{\n                receivedMessage, handleChange, sendMessage, messages, message, id, sendByButton\n            }}>\n            {children}\n        </ChatContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}