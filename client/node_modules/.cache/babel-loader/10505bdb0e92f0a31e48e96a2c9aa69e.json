{"ast":null,"code":"var _jsxFileName = \"/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/cmps/Messages.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Messages = () => {\n  _s();\n\n  const [yourID, setYourID] = useState();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = io.connect('/');\n    const newSocket = io(`http://${window.location.hostname}:3030`);\n    console.log(newSocket);\n    setSocket(newSocket);\n    console.log(socket, newSocket); //     return () => newSocket.close();\n\n    socketRef.current.on('your id', id => {\n      setYourID(id);\n    });\n    socketRef.current.on('message', message => {\n      console.log('here');\n      receivedMessage(message);\n    });\n  }, []);\n\n  function receivedMessage(message) {\n    setMessages(oldMsgs => [...oldMsgs, message]);\n  }\n\n  function sendMessage(e) {\n    e.preventDefault();\n    const messageObject = {\n      body: message,\n      id: yourID\n    };\n    setMessage('');\n    socketRef.current.emit('send message', messageObject);\n  }\n\n  function handleChange(e) {\n    setMessage(e.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((message, index) => {\n        if (message.id === yourID) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: message.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: message.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: message,\n        onChange: handleChange,\n        placeholder: \"Say something...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Messages, \"l9qeO7bV9/WYRc+GfKcR2Rgoqc0=\");\n\n_c = Messages;\nexport default Messages; // import React, { useEffect, useState } from 'react';\n// function Messages({ socket }) {\n//   const [messages, setMessages] = useState({});\n//   console.log(messages);\n//   useEffect(() => {\n//     const messageListener = (message) => {\n//       setMessages((prevMessages) => {\n//         const newMessages = {...prevMessages};\n//         newMessages[message.id] = message;\n//         return newMessages;\n//       });\n//     };\n//     const deleteMessageListener = (messageID) => {\n//       console.log(messageID);\n//       setMessages((prevMessages) => {\n//         console.log(prevMessages);\n//         const newMessages = {...prevMessages};\n//         delete newMessages[messageID];\n//         return newMessages;\n//       });\n//     };\n//     socket.on('message', messageListener);\n//     socket.on('deleteMessage', deleteMessageListener);\n//     socket.emit('getMessages');\n//     return () => {\n//       socket.off('message', messageListener);\n//       socket.off('deleteMessage', deleteMessageListener);\n//     };\n//   }, [socket]);\n//   return (\n//     <div className=\"message-list\">\n//       <h1>lala</h1>\n//       {[...Object.values(messages)]\n//         .sort((a, b) => a.time - b.time)\n//         .map((message) => (\n//           <div\n//             key={message.id}\n//             className=\"message-container\"\n//             title={`Sent at ${new Date(message.time).toLocaleTimeString()}`}\n//           >\n//             <span className=\"message\">{message.value}</span>\n//           </div>\n//         ))\n//       }\n//     </div>\n//   );\n// }\n// export default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["/Users/haleliamiad/Desktop/interviews/cartloop-chat/frontend/src/cmps/Messages.jsx"],"names":["React","useState","useEffect","useRef","io","Messages","yourID","setYourID","messages","setMessages","message","setMessage","socketRef","current","connect","newSocket","window","location","hostname","console","log","setSocket","socket","on","id","receivedMessage","oldMsgs","sendMessage","e","preventDefault","messageObject","body","emit","handleChange","target","value","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\n\nconst Messages = () => {\n  const [ yourID, setYourID ] = useState();\n  const [ messages, setMessages ] = useState([]);\n  const [ message, setMessage ] = useState('');\n\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = io.connect('/');\n          const newSocket = io(`http://${window.location.hostname}:3030`);\n          console.log(newSocket);\n          setSocket(newSocket);\n          console.log(socket, newSocket);\n      //     return () => newSocket.close();\n    socketRef.current.on('your id', (id) => {\n      setYourID(id);\n    });\n\n    socketRef.current.on('message', (message) => {\n      console.log('here');\n      receivedMessage(message);\n    });\n  }, []);\n\n  function receivedMessage(message) {\n    setMessages((oldMsgs) => [ ...oldMsgs, message ]);\n  }\n\n  function sendMessage(e) {\n    e.preventDefault();\n    const messageObject = {\n      body: message,\n      id: yourID\n    };\n    setMessage('');\n    socketRef.current.emit('send message', messageObject);\n  }\n\n  function handleChange(e) {\n    setMessage(e.target.value);\n  }\n\n  return (\n    <div>\n      <div>\n        {messages.map((message, index) => {\n          if (message.id === yourID) {\n            return (\n              <div key={index}>\n                <div>{message.body}</div>\n              </div>\n            );\n          }\n          return (\n            <div key={index}>\n              <div>{message.body}</div>\n            </div>\n          );\n        })}\n      </div>\n      <form onSubmit={sendMessage}>\n        <textarea\n          value={message}\n          onChange={handleChange}\n          placeholder=\"Say something...\"\n        />\n        <button>Send</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Messages;\n// import React, { useEffect, useState } from 'react';\n\n// function Messages({ socket }) {\n//   const [messages, setMessages] = useState({});\n//   console.log(messages);\n//   useEffect(() => {\n//     const messageListener = (message) => {\n//       setMessages((prevMessages) => {\n//         const newMessages = {...prevMessages};\n//         newMessages[message.id] = message;\n//         return newMessages;\n//       });\n//     };\n\n//     const deleteMessageListener = (messageID) => {\n//       console.log(messageID);\n//       setMessages((prevMessages) => {\n//         console.log(prevMessages);\n//         const newMessages = {...prevMessages};\n//         delete newMessages[messageID];\n//         return newMessages;\n//       });\n//     };\n\n//     socket.on('message', messageListener);\n//     socket.on('deleteMessage', deleteMessageListener);\n//     socket.emit('getMessages');\n\n//     return () => {\n//       socket.off('message', messageListener);\n//       socket.off('deleteMessage', deleteMessageListener);\n//     };\n//   }, [socket]);\n\n//   return (\n//     <div className=\"message-list\">\n//       <h1>lala</h1>\n//       {[...Object.values(messages)]\n//         .sort((a, b) => a.time - b.time)\n//         .map((message) => (\n//           <div\n//             key={message.id}\n//             className=\"message-container\"\n//             title={`Sent at ${new Date(message.time).toLocaleTimeString()}`}\n//           >\n//             <span className=\"message\">{message.value}</span>\n//           </div>\n//         ))\n//       }\n//     </div>\n//   );\n// }\n\n// export default Messages;\n"]},"metadata":{},"sourceType":"module"}